import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, Update
from aiogram.fsm.storage.memory import MemoryStorage
from quart import Quart, request
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BOTHUB_API_KEY = os.getenv("BOTHUB_API_KEY")
LAWYER_PHONE = "+7(999)916-04-83"
ADMIN_IDS = [308383825, 321005569]
PORT = int(os.getenv("PORT", 10000))  # Render —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—Ç –≤—ã—à–µ 10000

if not TELEGRAM_BOT_TOKEN or not BOTHUB_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ BOTHUB_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart
app = Quart(__name__)

# –°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
user_question_count = {}

# API-–∫–ª–∏–µ–Ω—Ç OpenAI (Bothub)
client = OpenAI(
    api_key=BOTHUB_API_KEY,
    base_url="https://bothub.chat/api/v2/openai/v1"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Bothub API
def get_ai_response(prompt):
    try:
        stream = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            stream=True,
        )
        response = ""
        for chunk in stream:
            part = chunk.to_dict()['choices'][0]['delta'].get('content', None)
            if part:
                response += part
        return response if response else "–û—à–∏–±–∫–∞ –ò–ò."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bothub API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def notify_admins(message: Message):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username} (ID: {message.from_user.id}):\n\n{message.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: Message):
    user_question_count[message.from_user.id] = 0
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –†–æ–±–æ—Ç-–Æ—Ä–∏—Å—Ç, –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ —Å–≤–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_question(message: Message):
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    user_id = message.from_user.id
    if user_id not in user_question_count:
        user_question_count[user_id] = 0
    if user_question_count[user_id] >= 3:
        await message.answer(
            f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 3 –≤–æ–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —é—Ä–∏—Å—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É: {LAWYER_PHONE}"
        )
        return
    answer = get_ai_response(message.text)
    await notify_admins(message)
    user_question_count[user_id] += 1
    await message.answer(f"{answer}\n\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ü–æ–∑–≤–æ–Ω–∏—Ç–µ —é—Ä–∏—Å—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É: {LAWYER_PHONE}")

# Webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Quart
@app.route("/webhook", methods=["POST"])
async def webhook():
    try:
        data = await request.get_json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update = Update(**data)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Update

        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ aiogram 3.x
        await dp.process_update(update)

        return "OK", 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return "Internal Server Error", 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook
async def on_startup():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', 'your-app.onrender.com')}/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(on_startup())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
    app.run(host="0.0.0.0", port=PORT)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ Render

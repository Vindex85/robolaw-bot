import os
import psycopg2
from psycopg2.extras import DictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL")

conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cur = conn.cursor(cursor_factory=DictCursor)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    with conn:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS questions (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                message_id BIGINT NOT NULL,
                question TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)

        cur.execute("""
            CREATE TABLE IF NOT EXISTS answers (
                id SERIAL PRIMARY KEY,
                question_id INT REFERENCES questions(id) ON DELETE CASCADE,
                user_id BIGINT NOT NULL,
                answer TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)

        cur.execute("""
            CREATE TABLE IF NOT EXISTS statistics (
                user_id BIGINT PRIMARY KEY,
                questions_asked INT DEFAULT 0,
                answers_given INT DEFAULT 0
            );
        """)

create_tables()

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)
FAQ = {
     "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?": "‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤ –¥–æ–≥–æ–≤–æ—Ä:\n- –°—Ç–æ—Ä–æ–Ω—ã\n- –ü—Ä–µ–¥–º–µ—Ç\n- –¶–µ–Ω–∞\n- –°—Ä–æ–∫–∏\n- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω\n–õ—É—á—à–µ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?": "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É. –ú–æ–∂–Ω–æ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—É–¥–µ –∏–ª–∏ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞.",
    "–ö–∞–∫ –æ—Å–ø–æ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ?": "‚úÖ –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–ò–ë–î–î –∏–ª–∏ —Å—É–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞.",
    "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞?": "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞:\n- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n- –í–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n- –ó–∞—â–∏—Ç—É –æ—Ç –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –≤—ã—Å–µ–ª–µ–Ω–∏—è.",
    "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?": "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫ ‚Äì –º–æ–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –æ–±–º–µ–Ω.",
    "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?": "‚úÖ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —é—Ä–∏—Å—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.",
    "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?": "‚úÖ –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞, –¥–∞–ª—å–Ω–µ–π—à–∏–µ —É—Å–ª—É–≥–∏ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ö–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞?": "‚úÖ –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —é—Ä–∏—Å—Ç–æ–≤."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
def save_question(user_id, message_id, question_text):
    with conn:
        cur.execute("""
            INSERT INTO questions (user_id, message_id, question)
            VALUES (%s, %s, %s);
        """, (user_id, message_id, question_text))

    update_statistics(user_id, is_question=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
def save_answer(question_id, user_id, answer_text):
    with conn:
        cur.execute("""
            INSERT INTO answers (question_id, user_id, answer)
            VALUES (%s, %s, %s);
        """, (question_id, user_id, answer_text))

    update_statistics(user_id, is_question=False)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def update_statistics(user_id, is_question=True):
    with conn:
        if is_question:
            cur.execute("""
                INSERT INTO statistics (user_id, questions_asked)
                VALUES (%s, 1)
                ON CONFLICT (user_id) DO UPDATE
                SET questions_asked = statistics.questions_asked + 1;
            """, (user_id,))
        else:
            cur.execute("""
                INSERT INTO statistics (user_id, answers_given)
                VALUES (%s, 1)
                ON CONFLICT (user_id) DO UPDATE
                SET answers_given = statistics.answers_given + 1;
            """, (user_id,))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
async def show_stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    cur.execute("SELECT questions_asked, answers_given FROM statistics WHERE user_id = %s", (user_id,))
    stats = cur.fetchone()

    if stats:
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {stats['questions_asked']}\n"
            f"üí¨ –û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ: {stats['answers_given']}"
        )
    else:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq
async def show_faq(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton(q, callback_data=q)] for q in FAQ.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ FAQ
async def faq_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    answer = FAQ.get(query.data, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await query.message.reply_text(f"‚ùì {query.data}\n\nüí° {answer}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("stats", show_stats))
application.add_handler(CommandHandler("faq", show_faq))
application.add_handler(CallbackQueryHandler(faq_callback))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
application.run_polling()

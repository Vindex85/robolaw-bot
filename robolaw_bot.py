import os
import psycopg2
from psycopg2.extras import DictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import logging
import atexit

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL")
ADMINS = [308383825, 321005569]  # ID –∞–¥–º–∏–Ω–æ–≤

conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cur = conn.cursor(cursor_factory=DictCursor)

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
def close_db_connection():
    cur.close()
    conn.close()
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

atexit.register(close_db_connection)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    try:
        with conn:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS questions (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    message_id BIGINT NOT NULL,
                    question TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)

            cur.execute("""
                CREATE TABLE IF NOT EXISTS answers (
                    id SERIAL PRIMARY KEY,
                    question_id INT REFERENCES questions(id) ON DELETE CASCADE,
                    user_id BIGINT NOT NULL,
                    answer TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

create_tables()

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)
FAQ = {
    "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?": "‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤ –¥–æ–≥–æ–≤–æ—Ä:\n- –°—Ç–æ—Ä–æ–Ω—ã\n- –ü—Ä–µ–¥–º–µ—Ç\n- –¶–µ–Ω–∞\n- –°—Ä–æ–∫–∏\n- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω\n–õ—É—á—à–µ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?": "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É. –ú–æ–∂–Ω–æ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—É–¥–µ –∏–ª–∏ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞.",
    "–ö–∞–∫ –æ—Å–ø–æ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ?": "‚úÖ –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–ò–ë–î–î –∏–ª–∏ —Å—É–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞.",
    "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞?": "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞:\n- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n- –í–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n- –ó–∞—â–∏—Ç—É –æ—Ç –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –≤—ã—Å–µ–ª–µ–Ω–∏—è.",
    "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?": "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫ ‚Äì –º–æ–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –æ–±–º–µ–Ω.",
    "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?": "‚úÖ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —é—Ä–∏—Å—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.",
    "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?": "‚úÖ –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞, –¥–∞–ª—å–Ω–µ–π—à–∏–µ —É—Å–ª—É–≥–∏ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ö–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞?": "‚úÖ –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —é—Ä–∏—Å—Ç–æ–≤."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
def save_question(user_id, message_id, question_text):
    try:
        with conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute("""
                INSERT INTO questions (user_id, message_id, question)
                VALUES (%s, %s, %s);
            """, (user_id, message_id, question_text))
            conn.commit()
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
def save_answer(question_id, user_id, answer_text):
    try:
        with conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute("""
                INSERT INTO answers (question_id, user_id, answer)
                VALUES (%s, %s, %s);
            """, (question_id, user_id, answer_text))
            conn.commit()
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("üìú –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—é—Ä–∏—Å—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ FAQ
async def faq_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    answer = FAQ.get(query.data)
    
    if answer:
        await query.edit_message_text(
            text=f"‚ùì *–í–æ–ø—Ä–æ—Å:* {query.data}\n\nüí° *–û—Ç–≤–µ—Ç:* {answer}",
            parse_mode="Markdown"
        )
    else:
        await query.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    if update.message.from_user.id in ADMINS:
        return
        
    user_id = update.message.from_user.id
    message_id = update.message.message_id
    question_text = update.message.text

    save_question(user_id, message_id, question_text)
    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {update.message.from_user.first_name} (ID: {user_id}):\n\n‚ùì {question_text}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_reply(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    
    if user_id not in ADMINS:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if update.message.reply_to_message:
        try:
            original_message = update.message.reply_to_message
            original_message_id = original_message.message_id
            
            with conn.cursor(cursor_factory=DictCursor) as cur:
                cur.execute("""
                    SELECT id, user_id, question 
                    FROM questions 
                    WHERE message_id = %s
                """, (original_message_id,))
                question = cur.fetchone()

            if question:
                save_answer(question['id'], user_id, update.message.text)
                
                await context.bot.send_message(
                    chat_id=question['user_id'],
                    text=f"üì© *–û—Ç–≤–µ—Ç —é—Ä–∏—Å—Ç–∞:*\n\n{update.message.text}",
                    parse_mode="Markdown"
                )
                
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=original_message_id
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    exit(1)

application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(faq_callback))
application.add_handler(MessageHandler(filters.REPLY & filters.TEXT, handle_reply))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.REPLY, handle_message))

logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
application.run_polling()
import logging
import os
import time
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext
import psycopg2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –≤–º–µ—Å—Ç–æ SQLite
from psycopg2.extras import RealDictCursor

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "321005569,308383825").split(",")))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render)
DATABASE_URL = os.getenv("DATABASE_URL")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    return conn

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS questions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER,
        question TEXT,
        answer TEXT,
        status TEXT DEFAULT 'pending',
        created_at INTEGER,
        message_id INTEGER
    )''')
    conn.commit()
    cursor.close()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
FAQ = {
    "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?": "‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤ –¥–æ–≥–æ–≤–æ—Ä:\n- –°—Ç–æ—Ä–æ–Ω—ã\n- –ü—Ä–µ–¥–º–µ—Ç\n- –¶–µ–Ω–∞\n- –°—Ä–æ–∫–∏\n- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω\n–õ—É—á—à–µ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?": "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É. –ú–æ–∂–Ω–æ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—É–¥–µ –∏–ª–∏ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞.",
    "–ö–∞–∫ –æ—Å–ø–æ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ?": "‚úÖ –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–ò–ë–î–î –∏–ª–∏ —Å—É–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞.",
    "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞?": "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞:\n- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n- –í–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n- –ó–∞—â–∏—Ç—É –æ—Ç –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –≤—ã—Å–µ–ª–µ–Ω–∏—è.",
    "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?": "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫ ‚Äì –º–æ–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –æ–±–º–µ–Ω."
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É", callback_data="ask_lawyer")],
        [InlineKeyboardButton("üìå –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—é—Ä–∏—Å—Ç ü§ñ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "ask_lawyer":
        await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —é—Ä–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    
    elif query.data == "faq":
        keyboard = [[InlineKeyboardButton(q, callback_data=q)] for q in FAQ.keys()]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)
    
    elif query.data in FAQ:
        await query.message.reply_text(f"üí° *–û—Ç–≤–µ—Ç:*\n{FAQ[query.data]}", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    user_name = update.message.from_user.first_name
    question = update.message.text
    message_id = update.message.message_id
    timestamp = int(time.time())

    if user_id in ADMIN_IDS:
        logging.info(f"üõë –Æ—Ä–∏—Å—Ç {user_name} ({user_id}) –Ω–∞–ø–∏—Å–∞–ª: '{question}'. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
        return

    logging.info(f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id}), message_id: {message_id}")

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO questions (user_id, message_id, question, status, created_at) VALUES (%s, %s, %s, 'pending', %s)",
            (user_id, message_id, question, timestamp)
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await context.bot.send_message(
        chat_id=ADMIN_IDS[0],  
        text=f"üì© *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id})*\n\n‚ùì {question}\n\n"
             f"üìå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å', —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        parse_mode="Markdown"
    )

    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —é—Ä–∏—Å—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —é—Ä–∏—Å—Ç–∞
async def reply_to_user(update: Update, context: CallbackContext) -> None:
    """–Æ—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_id = update.message.from_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if update.message.reply_to_message:
        reply_text = update.message.text
        replied_message_id = update.message.reply_to_message.message_id

        logging.info(f"üîç –Æ—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {replied_message_id}. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î...")

        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, message_id FROM questions WHERE message_id = %s", (replied_message_id,))
            result = cursor.fetchone()

            if not result:
                logging.warning(f"‚ö†Ô∏è message_id={replied_message_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ –ë–î. –ò—â–µ–º –ø–æ user_id...")
                cursor.execute("SELECT user_id, message_id FROM questions WHERE status = 'pending' ORDER BY created_at DESC LIMIT 1")
                result = cursor.fetchone()

            if result:
                recipient_id, original_message_id = result
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω user_id: {recipient_id}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç...")

                cursor.execute(
                    "UPDATE questions SET answer = %s, status = 'answered' WHERE user_id = %s AND message_id = %s",
                    (reply_text, recipient_id, original_message_id)
                )
                conn.commit()

                await context.bot.send_message(chat_id=recipient_id, text=f"üì© –û—Ç–≤–µ—Ç —é—Ä–∏—Å—Ç–∞:\n\nüí¨ {reply_text}")
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞!")
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            cursor.close()
            conn.close()
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.REPLY & filters.TEXT, reply_to_user))

    application.run_polling()

if __name__ == "__main__":
    main()
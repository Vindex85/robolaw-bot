import sqlite3
import time
import threading
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, CallbackContext
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!)
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–û–¢_BOTFATHER"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–∫–∞–∂–∏ —Å–≤–æ–π ID –∏ ID —é—Ä–∏—Å—Ç–∞)
ADMIN_IDS = {321005569, 308383825}  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ SQLite
conn = sqlite3.connect("law_bot.db", check_same_thread=False)
cursor = conn.cursor()
db_lock = threading.Lock()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤
with db_lock:
    cursor.execute('''CREATE TABLE IF NOT EXISTS questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        question TEXT,
        answer TEXT,
        status TEXT DEFAULT 'pending',
        created_at INTEGER,
        message_id INTEGER
    )''')
    conn.commit()

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
faq = {
    "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?": "–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–µ–¥–º–µ—Ç, —Ü–µ–Ω–∞, —Å—Ä–æ–∫–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –õ—É—á—à–µ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É. –ú–æ–∂–Ω–æ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—É–¥–µ –∏–ª–∏ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞.",
    "–ö–∞–∫ –æ—Å–ø–æ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ?": "–ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–ò–ë–î–î –∏–ª–∏ —Å—É–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞. –û–±–æ—Å–Ω—É–π—Ç–µ —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏.",
    "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞?": "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –∑–∞—â–∏—Ç—É –æ—Ç –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –≤—ã—Å–µ–ª–µ–Ω–∏—è.",
    "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?": "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ –ø—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤."
}

# –§—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton(q, callback_data=q)] for q in faq.keys()]
    keyboard.append([InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É", callback_data="ask_lawyer")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—é—Ä–∏—Å—Ç ü§ñ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "ask_lawyer":
        await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —é—Ä–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        return
    
    response = faq.get(query.data, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç.")
    await query.edit_message_text(text=f"‚ùì {query.data}\n\nüí° {response}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    question = update.message.text
    message_id = update.message.message_id
    timestamp = int(time.time())

    with db_lock:
        cursor.execute("INSERT INTO questions (user_id, message_id, question, status, created_at) VALUES (?, ?, ?, 'pending', ?)",
                       (user_id, message_id, question, timestamp))
        conn.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —é—Ä–∏—Å—Ç—É
    for admin_id in ADMIN_IDS:
        await context.bot.send_message(
            chat_id=admin_id,
            text=f"üì© *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id})*\n\n‚ùì {question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            parse_mode="Markdown"
        )

    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —é—Ä–∏—Å—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —é—Ä–∏—Å—Ç–∞
async def reply_to_user(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if update.message.reply_to_message:
        answer_text = update.message.text
        replied_message = update.message.reply_to_message.text

        with db_lock:
            cursor.execute("SELECT user_id FROM questions WHERE question = ? AND status='pending'", (replied_message,))
            user_id = cursor.fetchone()

        if user_id:
            user_id = user_id[0]

            with db_lock:
                cursor.execute("UPDATE questions SET answer = ?, status = 'answered' WHERE user_id = ? AND question = ?",
                               (answer_text, user_id, replied_message))
                conn.commit()

            await context.bot.send_message(chat_id=user_id, text=f"üì© –û—Ç–≤–µ—Ç —é—Ä–∏—Å—Ç–∞:\n\nüí¨ {answer_text}")
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    with db_lock:
        cursor.execute("SELECT COUNT(*) FROM questions WHERE status='pending'")
        pending_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM questions WHERE status='answered'")
        answered_count = cursor.fetchone()[0]

    stats_message = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n\n"
        f"üìù **–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤**: {pending_count}\n"
        f"‚úÖ **–û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤**: {answered_count}\n"
    )

    await update.message.reply_text(stats_message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.REPLY & filters.TEXT, reply_to_user))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    app.run_polling()

if __name__ == "__main__":
    main()

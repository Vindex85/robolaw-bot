import sqlite3
import time
import threading
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Å–ø–∏—Å–æ–∫)
ADMIN_IDS = {321005569, 308383825}  # –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("law_bot.db", check_same_thread=False)
cursor = conn.cursor()
db_lock = threading.Lock()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
with db_lock:
    cursor.execute('''CREATE TABLE IF NOT EXISTS questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        question TEXT,
        answer TEXT,
        status TEXT DEFAULT 'pending',
        created_at INTEGER,
        message_id INTEGER
    )''')
    conn.commit()

# –ì–æ—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã
faq = {
    "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?": "‚úÖ –í–∫–ª—é—á–∏—Ç–µ –≤ –¥–æ–≥–æ–≤–æ—Ä:\n- –°—Ç–æ—Ä–æ–Ω—ã\n- –ü—Ä–µ–¥–º–µ—Ç\n- –¶–µ–Ω–∞\n- –°—Ä–æ–∫–∏\n- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω\n–õ—É—á—à–µ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º.",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?": "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É. –ú–æ–∂–Ω–æ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—É–¥–µ –∏–ª–∏ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –≤ –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞.",
    "–ö–∞–∫ –æ—Å–ø–æ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ?": "‚úÖ –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–ò–ë–î–î –∏–ª–∏ —Å—É–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞.",
    "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞?": "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞:\n- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π\n- –í–æ–∑–≤—Ä–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n- –ó–∞—â–∏—Ç—É –æ—Ç –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –≤—ã—Å–µ–ª–µ–Ω–∏—è.",
    "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?": "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫ ‚Äì –º–æ–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –æ–±–º–µ–Ω.",
}

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton(q, callback_data=q)] for q in faq.keys()]
    keyboard.append([InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É", callback_data="ask_lawyer")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—é—Ä–∏—Å—Ç ü§ñ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query

    try:
        query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–∂–∞—Ç–∏–µ
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ query.answer(): {e}")

    if query.data == "ask_lawyer":
        query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —é—Ä–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        return
    
    response = faq.get(query.data, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç.")
    
    try:
        query.message.reply_text(f"‚ùì {query.data}\n\nüí° {response}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É {query.data}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    user_name = update.message.from_user.first_name
    question = update.message.text
    message_id = update.message.message_id
    timestamp = int(time.time())

    # –ï—Å–ª–∏ —é—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ "–û—Ç–≤–µ—Ç–∏—Ç—å", –ø–µ—Ä–µ–¥–∞–µ–º –≤ reply_to_user()
    if update.message.reply_to_message and user_id in ADMIN_IDS:
        logger.info(f"üîπ –Æ—Ä–∏—Å—Ç {user_name} ({user_id}) –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ü–µ—Ä–µ–¥–∞–µ–º –≤ reply_to_user().")
        reply_to_user(update, context)
        return

    # –ï—Å–ª–∏ —é—Ä–∏—Å—Ç –ø–∏—à–µ—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if user_id in ADMIN_IDS:
        logger.info(f"üîπ –Æ—Ä–∏—Å—Ç {user_name} ({user_id}) –Ω–∞–ø–∏—Å–∞–ª –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {question}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    try:
        with db_lock:
            cursor.execute("INSERT INTO questions (user_id, message_id, question, status, created_at) VALUES (?, ?, ?, 'pending', ?)", 
                           (user_id, message_id, question, timestamp))
            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üì© *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id})*\n\n‚ùì {question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —é—Ä–∏—Å—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —é—Ä–∏—Å—Ç–∞
def reply_to_user(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id not in ADMIN_IDS:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not update.message.reply_to_message:
        update.message.reply_text("‚ö†Ô∏è –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    text = update.message.text
    message_id = update.message.reply_to_message.message_id

    logger.info(f"üîç –Æ—Ä–∏—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}, –∏—â–µ–º user_id –≤ –ë–î...")

    extracted_user_id = None
    with db_lock:
        cursor.execute("SELECT user_id FROM questions WHERE message_id = ?", (message_id,))
        result = cursor.fetchone()
        if result:
            extracted_user_id = result[0]

    if not extracted_user_id:
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω message_id={message_id} –≤ –ë–î! –ò—â–µ–º –ø–æ user_id...")
        with db_lock:
            cursor.execute("SELECT user_id FROM questions WHERE status='pending' ORDER BY created_at DESC LIMIT 1")
            result = cursor.fetchone()
            if result:
                extracted_user_id = result[0]
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω user_id={extracted_user_id} –ø–æ —Å—Ç–∞—Ç—É—Å—É 'pending'.")

    if not extracted_user_id:
        update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. message_id={message_id}")
        return

    try:
        with db_lock:
            cursor.execute("UPDATE questions SET answer = ?, status = 'answered' WHERE user_id = ? AND status='pending'", 
                           (text, extracted_user_id))
            conn.commit()

            context.bot.send_message(chat_id=extracted_user_id, text=f"üì© –û—Ç–≤–µ—Ç —é—Ä–∏—Å—Ç–∞:\n\nüí¨ {text}")
            update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {extracted_user_id}: {text}")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
def stats(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.id not in ADMIN_IDS:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    with db_lock:
        cursor.execute("SELECT COUNT(*) FROM questions WHERE status='pending'")
        pending = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM questions WHERE status='answered'")
        answered = cursor.fetchone()[0]

    update.message.reply_text(f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ: {answered}\n‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {pending}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("stats", stats))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(MessageHandler(Filters.reply & Filters.text, reply_to_user))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()